using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Bitcoin_Notify_DB
{
	/// <summary>
	/// Strongly-typed collection for the ArbResult class.
	/// </summary>
    [Serializable]
	public partial class ArbResultCollection : ActiveList<ArbResult, ArbResultCollection>
	{	   
		public ArbResultCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ArbResultCollection</returns>
		public ArbResultCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ArbResult o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Arb_Results table.
	/// </summary>
	[Serializable]
	public partial class ArbResult : ActiveRecord<ArbResult>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ArbResult()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ArbResult(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ArbResult(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ArbResult(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Arb_Results", TableType.Table, DataService.GetInstance("Bitcoin_Notify"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarArbResultsKey = new TableSchema.TableColumn(schema);
				colvarArbResultsKey.ColumnName = "arb_results_key";
				colvarArbResultsKey.DataType = DbType.Int32;
				colvarArbResultsKey.MaxLength = 0;
				colvarArbResultsKey.AutoIncrement = false;
				colvarArbResultsKey.IsNullable = false;
				colvarArbResultsKey.IsPrimaryKey = true;
				colvarArbResultsKey.IsForeignKey = false;
				colvarArbResultsKey.IsReadOnly = false;
				colvarArbResultsKey.DefaultSetting = @"";
				colvarArbResultsKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArbResultsKey);
				
				TableSchema.TableColumn colvarStartingNode = new TableSchema.TableColumn(schema);
				colvarStartingNode.ColumnName = "starting_node";
				colvarStartingNode.DataType = DbType.Int32;
				colvarStartingNode.MaxLength = 0;
				colvarStartingNode.AutoIncrement = false;
				colvarStartingNode.IsNullable = false;
				colvarStartingNode.IsPrimaryKey = false;
				colvarStartingNode.IsForeignKey = false;
				colvarStartingNode.IsReadOnly = false;
				colvarStartingNode.DefaultSetting = @"";
				colvarStartingNode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingNode);
				
				TableSchema.TableColumn colvarEndNode = new TableSchema.TableColumn(schema);
				colvarEndNode.ColumnName = "end_node";
				colvarEndNode.DataType = DbType.Int32;
				colvarEndNode.MaxLength = 0;
				colvarEndNode.AutoIncrement = false;
				colvarEndNode.IsNullable = false;
				colvarEndNode.IsPrimaryKey = false;
				colvarEndNode.IsForeignKey = false;
				colvarEndNode.IsReadOnly = false;
				colvarEndNode.DefaultSetting = @"";
				colvarEndNode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndNode);
				
				TableSchema.TableColumn colvarPercentage = new TableSchema.TableColumn(schema);
				colvarPercentage.ColumnName = "percentage";
				colvarPercentage.DataType = DbType.Decimal;
				colvarPercentage.MaxLength = 0;
				colvarPercentage.AutoIncrement = false;
				colvarPercentage.IsNullable = true;
				colvarPercentage.IsPrimaryKey = false;
				colvarPercentage.IsForeignKey = false;
				colvarPercentage.IsReadOnly = false;
				colvarPercentage.DefaultSetting = @"";
				colvarPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercentage);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = true;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarTriptime = new TableSchema.TableColumn(schema);
				colvarTriptime.ColumnName = "triptime";
				colvarTriptime.DataType = DbType.Int32;
				colvarTriptime.MaxLength = 0;
				colvarTriptime.AutoIncrement = false;
				colvarTriptime.IsNullable = true;
				colvarTriptime.IsPrimaryKey = false;
				colvarTriptime.IsForeignKey = false;
				colvarTriptime.IsReadOnly = false;
				colvarTriptime.DefaultSetting = @"";
				colvarTriptime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTriptime);
				
				TableSchema.TableColumn colvarLabel = new TableSchema.TableColumn(schema);
				colvarLabel.ColumnName = "label";
				colvarLabel.DataType = DbType.String;
				colvarLabel.MaxLength = 100;
				colvarLabel.AutoIncrement = false;
				colvarLabel.IsNullable = true;
				colvarLabel.IsPrimaryKey = false;
				colvarLabel.IsForeignKey = false;
				colvarLabel.IsReadOnly = false;
				colvarLabel.DefaultSetting = @"";
				colvarLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLabel);
				
				TableSchema.TableColumn colvarStartingmaker = new TableSchema.TableColumn(schema);
				colvarStartingmaker.ColumnName = "startingmaker";
				colvarStartingmaker.DataType = DbType.Boolean;
				colvarStartingmaker.MaxLength = 0;
				colvarStartingmaker.AutoIncrement = false;
				colvarStartingmaker.IsNullable = true;
				colvarStartingmaker.IsPrimaryKey = false;
				colvarStartingmaker.IsForeignKey = false;
				colvarStartingmaker.IsReadOnly = false;
				colvarStartingmaker.DefaultSetting = @"";
				colvarStartingmaker.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingmaker);
				
				TableSchema.TableColumn colvarNumberofnodes = new TableSchema.TableColumn(schema);
				colvarNumberofnodes.ColumnName = "numberofnodes";
				colvarNumberofnodes.DataType = DbType.Int32;
				colvarNumberofnodes.MaxLength = 0;
				colvarNumberofnodes.AutoIncrement = false;
				colvarNumberofnodes.IsNullable = true;
				colvarNumberofnodes.IsPrimaryKey = false;
				colvarNumberofnodes.IsForeignKey = false;
				colvarNumberofnodes.IsReadOnly = false;
				colvarNumberofnodes.DefaultSetting = @"";
				colvarNumberofnodes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberofnodes);
				
				TableSchema.TableColumn colvarVolume = new TableSchema.TableColumn(schema);
				colvarVolume.ColumnName = "volume";
				colvarVolume.DataType = DbType.Currency;
				colvarVolume.MaxLength = 0;
				colvarVolume.AutoIncrement = false;
				colvarVolume.IsNullable = true;
				colvarVolume.IsPrimaryKey = false;
				colvarVolume.IsForeignKey = false;
				colvarVolume.IsReadOnly = false;
				colvarVolume.DefaultSetting = @"";
				colvarVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVolume);
				
				TableSchema.TableColumn colvarProfit = new TableSchema.TableColumn(schema);
				colvarProfit.ColumnName = "profit";
				colvarProfit.DataType = DbType.Currency;
				colvarProfit.MaxLength = 0;
				colvarProfit.AutoIncrement = false;
				colvarProfit.IsNullable = true;
				colvarProfit.IsPrimaryKey = false;
				colvarProfit.IsForeignKey = false;
				colvarProfit.IsReadOnly = false;
				colvarProfit.DefaultSetting = @"";
				colvarProfit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProfit);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Bitcoin_Notify"].AddSchema("Arb_Results",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ArbResultsKey")]
		[Bindable(true)]
		public int ArbResultsKey 
		{
			get { return GetColumnValue<int>(Columns.ArbResultsKey); }
			set { SetColumnValue(Columns.ArbResultsKey, value); }
		}
		  
		[XmlAttribute("StartingNode")]
		[Bindable(true)]
		public int StartingNode 
		{
			get { return GetColumnValue<int>(Columns.StartingNode); }
			set { SetColumnValue(Columns.StartingNode, value); }
		}
		  
		[XmlAttribute("EndNode")]
		[Bindable(true)]
		public int EndNode 
		{
			get { return GetColumnValue<int>(Columns.EndNode); }
			set { SetColumnValue(Columns.EndNode, value); }
		}
		  
		[XmlAttribute("Percentage")]
		[Bindable(true)]
		public decimal? Percentage 
		{
			get { return GetColumnValue<decimal?>(Columns.Percentage); }
			set { SetColumnValue(Columns.Percentage, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime? LastChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("Triptime")]
		[Bindable(true)]
		public int? Triptime 
		{
			get { return GetColumnValue<int?>(Columns.Triptime); }
			set { SetColumnValue(Columns.Triptime, value); }
		}
		  
		[XmlAttribute("Label")]
		[Bindable(true)]
		public string Label 
		{
			get { return GetColumnValue<string>(Columns.Label); }
			set { SetColumnValue(Columns.Label, value); }
		}
		  
		[XmlAttribute("Startingmaker")]
		[Bindable(true)]
		public bool? Startingmaker 
		{
			get { return GetColumnValue<bool?>(Columns.Startingmaker); }
			set { SetColumnValue(Columns.Startingmaker, value); }
		}
		  
		[XmlAttribute("Numberofnodes")]
		[Bindable(true)]
		public int? Numberofnodes 
		{
			get { return GetColumnValue<int?>(Columns.Numberofnodes); }
			set { SetColumnValue(Columns.Numberofnodes, value); }
		}
		  
		[XmlAttribute("Volume")]
		[Bindable(true)]
		public decimal? Volume 
		{
			get { return GetColumnValue<decimal?>(Columns.Volume); }
			set { SetColumnValue(Columns.Volume, value); }
		}
		  
		[XmlAttribute("Profit")]
		[Bindable(true)]
		public decimal? Profit 
		{
			get { return GetColumnValue<decimal?>(Columns.Profit); }
			set { SetColumnValue(Columns.Profit, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varArbResultsKey,int varStartingNode,int varEndNode,decimal? varPercentage,DateTime? varLastChanged,int? varTriptime,string varLabel,bool? varStartingmaker,int? varNumberofnodes,decimal? varVolume,decimal? varProfit)
		{
			ArbResult item = new ArbResult();
			
			item.ArbResultsKey = varArbResultsKey;
			
			item.StartingNode = varStartingNode;
			
			item.EndNode = varEndNode;
			
			item.Percentage = varPercentage;
			
			item.LastChanged = varLastChanged;
			
			item.Triptime = varTriptime;
			
			item.Label = varLabel;
			
			item.Startingmaker = varStartingmaker;
			
			item.Numberofnodes = varNumberofnodes;
			
			item.Volume = varVolume;
			
			item.Profit = varProfit;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varArbResultsKey,int varStartingNode,int varEndNode,decimal? varPercentage,DateTime? varLastChanged,int? varTriptime,string varLabel,bool? varStartingmaker,int? varNumberofnodes,decimal? varVolume,decimal? varProfit)
		{
			ArbResult item = new ArbResult();
			
				item.ArbResultsKey = varArbResultsKey;
			
				item.StartingNode = varStartingNode;
			
				item.EndNode = varEndNode;
			
				item.Percentage = varPercentage;
			
				item.LastChanged = varLastChanged;
			
				item.Triptime = varTriptime;
			
				item.Label = varLabel;
			
				item.Startingmaker = varStartingmaker;
			
				item.Numberofnodes = varNumberofnodes;
			
				item.Volume = varVolume;
			
				item.Profit = varProfit;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ArbResultsKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StartingNodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EndNodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PercentageColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TriptimeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LabelColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StartingmakerColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NumberofnodesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn VolumeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ProfitColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ArbResultsKey = @"arb_results_key";
			 public static string StartingNode = @"starting_node";
			 public static string EndNode = @"end_node";
			 public static string Percentage = @"percentage";
			 public static string LastChanged = @"last_changed";
			 public static string Triptime = @"triptime";
			 public static string Label = @"label";
			 public static string Startingmaker = @"startingmaker";
			 public static string Numberofnodes = @"numberofnodes";
			 public static string Volume = @"volume";
			 public static string Profit = @"profit";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
