using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Bitcoin_Notify_DB
{
	/// <summary>
	/// Strongly-typed collection for the Notification class.
	/// </summary>
    [Serializable]
	public partial class NotificationCollection : ActiveList<Notification, NotificationCollection>
	{	   
		public NotificationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>NotificationCollection</returns>
		public NotificationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Notification o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Notifications table.
	/// </summary>
	[Serializable]
	public partial class Notification : ActiveRecord<Notification>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Notification()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Notification(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Notification(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Notification(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Notifications", TableType.Table, DataService.GetInstance("Bitcoin_Notify"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarNotificationKey = new TableSchema.TableColumn(schema);
				colvarNotificationKey.ColumnName = "notification_key";
				colvarNotificationKey.DataType = DbType.Int32;
				colvarNotificationKey.MaxLength = 0;
				colvarNotificationKey.AutoIncrement = true;
				colvarNotificationKey.IsNullable = false;
				colvarNotificationKey.IsPrimaryKey = true;
				colvarNotificationKey.IsForeignKey = false;
				colvarNotificationKey.IsReadOnly = false;
				colvarNotificationKey.DefaultSetting = @"";
				colvarNotificationKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotificationKey);
				
				TableSchema.TableColumn colvarStartingNode = new TableSchema.TableColumn(schema);
				colvarStartingNode.ColumnName = "starting_node";
				colvarStartingNode.DataType = DbType.Int32;
				colvarStartingNode.MaxLength = 0;
				colvarStartingNode.AutoIncrement = false;
				colvarStartingNode.IsNullable = false;
				colvarStartingNode.IsPrimaryKey = false;
				colvarStartingNode.IsForeignKey = false;
				colvarStartingNode.IsReadOnly = false;
				colvarStartingNode.DefaultSetting = @"";
				colvarStartingNode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingNode);
				
				TableSchema.TableColumn colvarThreashold = new TableSchema.TableColumn(schema);
				colvarThreashold.ColumnName = "threashold";
				colvarThreashold.DataType = DbType.Decimal;
				colvarThreashold.MaxLength = 0;
				colvarThreashold.AutoIncrement = false;
				colvarThreashold.IsNullable = false;
				colvarThreashold.IsPrimaryKey = false;
				colvarThreashold.IsForeignKey = false;
				colvarThreashold.IsReadOnly = false;
				colvarThreashold.DefaultSetting = @"";
				colvarThreashold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThreashold);
				
				TableSchema.TableColumn colvarLastSent = new TableSchema.TableColumn(schema);
				colvarLastSent.ColumnName = "last_sent";
				colvarLastSent.DataType = DbType.DateTime;
				colvarLastSent.MaxLength = 0;
				colvarLastSent.AutoIncrement = false;
				colvarLastSent.IsNullable = true;
				colvarLastSent.IsPrimaryKey = false;
				colvarLastSent.IsForeignKey = false;
				colvarLastSent.IsReadOnly = false;
				colvarLastSent.DefaultSetting = @"";
				colvarLastSent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastSent);
				
				TableSchema.TableColumn colvarSendwindow = new TableSchema.TableColumn(schema);
				colvarSendwindow.ColumnName = "sendwindow";
				colvarSendwindow.DataType = DbType.Int32;
				colvarSendwindow.MaxLength = 0;
				colvarSendwindow.AutoIncrement = false;
				colvarSendwindow.IsNullable = false;
				colvarSendwindow.IsPrimaryKey = false;
				colvarSendwindow.IsForeignKey = false;
				colvarSendwindow.IsReadOnly = false;
				colvarSendwindow.DefaultSetting = @"";
				colvarSendwindow.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendwindow);
				
				TableSchema.TableColumn colvarThreasholdDirection = new TableSchema.TableColumn(schema);
				colvarThreasholdDirection.ColumnName = "threashold_direction";
				colvarThreasholdDirection.DataType = DbType.Int32;
				colvarThreasholdDirection.MaxLength = 0;
				colvarThreasholdDirection.AutoIncrement = false;
				colvarThreasholdDirection.IsNullable = false;
				colvarThreasholdDirection.IsPrimaryKey = false;
				colvarThreasholdDirection.IsForeignKey = false;
				colvarThreasholdDirection.IsReadOnly = false;
				colvarThreasholdDirection.DefaultSetting = @"";
				colvarThreasholdDirection.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThreasholdDirection);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Bitcoin_Notify"].AddSchema("Notifications",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("NotificationKey")]
		[Bindable(true)]
		public int NotificationKey 
		{
			get { return GetColumnValue<int>(Columns.NotificationKey); }
			set { SetColumnValue(Columns.NotificationKey, value); }
		}
		  
		[XmlAttribute("StartingNode")]
		[Bindable(true)]
		public int StartingNode 
		{
			get { return GetColumnValue<int>(Columns.StartingNode); }
			set { SetColumnValue(Columns.StartingNode, value); }
		}
		  
		[XmlAttribute("Threashold")]
		[Bindable(true)]
		public decimal Threashold 
		{
			get { return GetColumnValue<decimal>(Columns.Threashold); }
			set { SetColumnValue(Columns.Threashold, value); }
		}
		  
		[XmlAttribute("LastSent")]
		[Bindable(true)]
		public DateTime? LastSent 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastSent); }
			set { SetColumnValue(Columns.LastSent, value); }
		}
		  
		[XmlAttribute("Sendwindow")]
		[Bindable(true)]
		public int Sendwindow 
		{
			get { return GetColumnValue<int>(Columns.Sendwindow); }
			set { SetColumnValue(Columns.Sendwindow, value); }
		}
		  
		[XmlAttribute("ThreasholdDirection")]
		[Bindable(true)]
		public int ThreasholdDirection 
		{
			get { return GetColumnValue<int>(Columns.ThreasholdDirection); }
			set { SetColumnValue(Columns.ThreasholdDirection, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varStartingNode,decimal varThreashold,DateTime? varLastSent,int varSendwindow,int varThreasholdDirection)
		{
			Notification item = new Notification();
			
			item.StartingNode = varStartingNode;
			
			item.Threashold = varThreashold;
			
			item.LastSent = varLastSent;
			
			item.Sendwindow = varSendwindow;
			
			item.ThreasholdDirection = varThreasholdDirection;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varNotificationKey,int varStartingNode,decimal varThreashold,DateTime? varLastSent,int varSendwindow,int varThreasholdDirection)
		{
			Notification item = new Notification();
			
				item.NotificationKey = varNotificationKey;
			
				item.StartingNode = varStartingNode;
			
				item.Threashold = varThreashold;
			
				item.LastSent = varLastSent;
			
				item.Sendwindow = varSendwindow;
			
				item.ThreasholdDirection = varThreasholdDirection;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn NotificationKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StartingNodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ThreasholdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastSentColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SendwindowColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ThreasholdDirectionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string NotificationKey = @"notification_key";
			 public static string StartingNode = @"starting_node";
			 public static string Threashold = @"threashold";
			 public static string LastSent = @"last_sent";
			 public static string Sendwindow = @"sendwindow";
			 public static string ThreasholdDirection = @"threashold_direction";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
