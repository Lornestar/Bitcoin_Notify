using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Bitcoin_Notify_DB{
    /// <summary>
    /// Strongly-typed collection for the VwMarketDatum class.
    /// </summary>
    [Serializable]
    public partial class VwMarketDatumCollection : ReadOnlyList<VwMarketDatum, VwMarketDatumCollection>
    {        
        public VwMarketDatumCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_MarketData view.
    /// </summary>
    [Serializable]
    public partial class VwMarketDatum : ReadOnlyRecord<VwMarketDatum>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_MarketData", TableType.View, DataService.GetInstance("Bitcoin_Notify"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarMarketKey = new TableSchema.TableColumn(schema);
                colvarMarketKey.ColumnName = "market_key";
                colvarMarketKey.DataType = DbType.Int32;
                colvarMarketKey.MaxLength = 0;
                colvarMarketKey.AutoIncrement = false;
                colvarMarketKey.IsNullable = true;
                colvarMarketKey.IsPrimaryKey = false;
                colvarMarketKey.IsForeignKey = false;
                colvarMarketKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarMarketKey);
                
                TableSchema.TableColumn colvarSource = new TableSchema.TableColumn(schema);
                colvarSource.ColumnName = "source";
                colvarSource.DataType = DbType.Int32;
                colvarSource.MaxLength = 0;
                colvarSource.AutoIncrement = false;
                colvarSource.IsNullable = true;
                colvarSource.IsPrimaryKey = false;
                colvarSource.IsForeignKey = false;
                colvarSource.IsReadOnly = false;
                
                schema.Columns.Add(colvarSource);
                
                TableSchema.TableColumn colvarDestination = new TableSchema.TableColumn(schema);
                colvarDestination.ColumnName = "destination";
                colvarDestination.DataType = DbType.Int32;
                colvarDestination.MaxLength = 0;
                colvarDestination.AutoIncrement = false;
                colvarDestination.IsNullable = true;
                colvarDestination.IsPrimaryKey = false;
                colvarDestination.IsForeignKey = false;
                colvarDestination.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestination);
                
                TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
                colvarPrice.ColumnName = "price";
                colvarPrice.DataType = DbType.Decimal;
                colvarPrice.MaxLength = 0;
                colvarPrice.AutoIncrement = false;
                colvarPrice.IsNullable = true;
                colvarPrice.IsPrimaryKey = false;
                colvarPrice.IsForeignKey = false;
                colvarPrice.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrice);
                
                TableSchema.TableColumn colvarDatechanged = new TableSchema.TableColumn(schema);
                colvarDatechanged.ColumnName = "datechanged";
                colvarDatechanged.DataType = DbType.DateTime;
                colvarDatechanged.MaxLength = 0;
                colvarDatechanged.AutoIncrement = false;
                colvarDatechanged.IsNullable = false;
                colvarDatechanged.IsPrimaryKey = false;
                colvarDatechanged.IsForeignKey = false;
                colvarDatechanged.IsReadOnly = false;
                
                schema.Columns.Add(colvarDatechanged);
                
                TableSchema.TableColumn colvarVolume = new TableSchema.TableColumn(schema);
                colvarVolume.ColumnName = "volume";
                colvarVolume.DataType = DbType.Decimal;
                colvarVolume.MaxLength = 0;
                colvarVolume.AutoIncrement = false;
                colvarVolume.IsNullable = true;
                colvarVolume.IsPrimaryKey = false;
                colvarVolume.IsForeignKey = false;
                colvarVolume.IsReadOnly = false;
                
                schema.Columns.Add(colvarVolume);
                
                TableSchema.TableColumn colvarSourceCurrencyKey = new TableSchema.TableColumn(schema);
                colvarSourceCurrencyKey.ColumnName = "Source_Currency_Key";
                colvarSourceCurrencyKey.DataType = DbType.Int32;
                colvarSourceCurrencyKey.MaxLength = 0;
                colvarSourceCurrencyKey.AutoIncrement = false;
                colvarSourceCurrencyKey.IsNullable = true;
                colvarSourceCurrencyKey.IsPrimaryKey = false;
                colvarSourceCurrencyKey.IsForeignKey = false;
                colvarSourceCurrencyKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarSourceCurrencyKey);
                
                TableSchema.TableColumn colvarDestinationCurrencyKey = new TableSchema.TableColumn(schema);
                colvarDestinationCurrencyKey.ColumnName = "Destination_Currency_Key";
                colvarDestinationCurrencyKey.DataType = DbType.Int32;
                colvarDestinationCurrencyKey.MaxLength = 0;
                colvarDestinationCurrencyKey.AutoIncrement = false;
                colvarDestinationCurrencyKey.IsNullable = true;
                colvarDestinationCurrencyKey.IsPrimaryKey = false;
                colvarDestinationCurrencyKey.IsForeignKey = false;
                colvarDestinationCurrencyKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarDestinationCurrencyKey);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Bitcoin_Notify"].AddSchema("vw_MarketData",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwMarketDatum()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwMarketDatum(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwMarketDatum(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwMarketDatum(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("MarketKey")]
        [Bindable(true)]
        public int? MarketKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("market_key");
		    }
            set 
		    {
			    SetColumnValue("market_key", value);
            }
        }
	      
        [XmlAttribute("Source")]
        [Bindable(true)]
        public int? Source 
	    {
		    get
		    {
			    return GetColumnValue<int?>("source");
		    }
            set 
		    {
			    SetColumnValue("source", value);
            }
        }
	      
        [XmlAttribute("Destination")]
        [Bindable(true)]
        public int? Destination 
	    {
		    get
		    {
			    return GetColumnValue<int?>("destination");
		    }
            set 
		    {
			    SetColumnValue("destination", value);
            }
        }
	      
        [XmlAttribute("Price")]
        [Bindable(true)]
        public decimal? Price 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("price");
		    }
            set 
		    {
			    SetColumnValue("price", value);
            }
        }
	      
        [XmlAttribute("Datechanged")]
        [Bindable(true)]
        public DateTime Datechanged 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("datechanged");
		    }
            set 
		    {
			    SetColumnValue("datechanged", value);
            }
        }
	      
        [XmlAttribute("Volume")]
        [Bindable(true)]
        public decimal? Volume 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("volume");
		    }
            set 
		    {
			    SetColumnValue("volume", value);
            }
        }
	      
        [XmlAttribute("SourceCurrencyKey")]
        [Bindable(true)]
        public int? SourceCurrencyKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Source_Currency_Key");
		    }
            set 
		    {
			    SetColumnValue("Source_Currency_Key", value);
            }
        }
	      
        [XmlAttribute("DestinationCurrencyKey")]
        [Bindable(true)]
        public int? DestinationCurrencyKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Destination_Currency_Key");
		    }
            set 
		    {
			    SetColumnValue("Destination_Currency_Key", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string MarketKey = @"market_key";
            
            public static string Source = @"source";
            
            public static string Destination = @"destination";
            
            public static string Price = @"price";
            
            public static string Datechanged = @"datechanged";
            
            public static string Volume = @"volume";
            
            public static string SourceCurrencyKey = @"Source_Currency_Key";
            
            public static string DestinationCurrencyKey = @"Destination_Currency_Key";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
