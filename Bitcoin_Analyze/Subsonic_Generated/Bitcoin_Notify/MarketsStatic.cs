using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Bitcoin_Notify_DB
{
	/// <summary>
	/// Strongly-typed collection for the MarketsStatic class.
	/// </summary>
    [Serializable]
	public partial class MarketsStaticCollection : ActiveList<MarketsStatic, MarketsStaticCollection>
	{	   
		public MarketsStaticCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MarketsStaticCollection</returns>
		public MarketsStaticCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MarketsStatic o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Markets_Static table.
	/// </summary>
	[Serializable]
	public partial class MarketsStatic : ActiveRecord<MarketsStatic>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public MarketsStatic()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MarketsStatic(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public MarketsStatic(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public MarketsStatic(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Markets_Static", TableType.Table, DataService.GetInstance("Bitcoin_Notify"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMarketStaticKey = new TableSchema.TableColumn(schema);
				colvarMarketStaticKey.ColumnName = "market_static_key";
				colvarMarketStaticKey.DataType = DbType.Int32;
				colvarMarketStaticKey.MaxLength = 0;
				colvarMarketStaticKey.AutoIncrement = true;
				colvarMarketStaticKey.IsNullable = false;
				colvarMarketStaticKey.IsPrimaryKey = true;
				colvarMarketStaticKey.IsForeignKey = false;
				colvarMarketStaticKey.IsReadOnly = false;
				colvarMarketStaticKey.DefaultSetting = @"";
				colvarMarketStaticKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketStaticKey);
				
				TableSchema.TableColumn colvarSourceCurrency = new TableSchema.TableColumn(schema);
				colvarSourceCurrency.ColumnName = "source_currency";
				colvarSourceCurrency.DataType = DbType.Int32;
				colvarSourceCurrency.MaxLength = 0;
				colvarSourceCurrency.AutoIncrement = false;
				colvarSourceCurrency.IsNullable = true;
				colvarSourceCurrency.IsPrimaryKey = false;
				colvarSourceCurrency.IsForeignKey = false;
				colvarSourceCurrency.IsReadOnly = false;
				colvarSourceCurrency.DefaultSetting = @"";
				colvarSourceCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSourceCurrency);
				
				TableSchema.TableColumn colvarDestinationCurrency = new TableSchema.TableColumn(schema);
				colvarDestinationCurrency.ColumnName = "destination_currency";
				colvarDestinationCurrency.DataType = DbType.Int32;
				colvarDestinationCurrency.MaxLength = 0;
				colvarDestinationCurrency.AutoIncrement = false;
				colvarDestinationCurrency.IsNullable = true;
				colvarDestinationCurrency.IsPrimaryKey = false;
				colvarDestinationCurrency.IsForeignKey = false;
				colvarDestinationCurrency.IsReadOnly = false;
				colvarDestinationCurrency.DefaultSetting = @"";
				colvarDestinationCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestinationCurrency);
				
				TableSchema.TableColumn colvarFeePercentage = new TableSchema.TableColumn(schema);
				colvarFeePercentage.ColumnName = "fee_percentage";
				colvarFeePercentage.DataType = DbType.Currency;
				colvarFeePercentage.MaxLength = 0;
				colvarFeePercentage.AutoIncrement = false;
				colvarFeePercentage.IsNullable = true;
				colvarFeePercentage.IsPrimaryKey = false;
				colvarFeePercentage.IsForeignKey = false;
				colvarFeePercentage.IsReadOnly = false;
				colvarFeePercentage.DefaultSetting = @"";
				colvarFeePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeePercentage);
				
				TableSchema.TableColumn colvarFeeStatic = new TableSchema.TableColumn(schema);
				colvarFeeStatic.ColumnName = "fee_static";
				colvarFeeStatic.DataType = DbType.Currency;
				colvarFeeStatic.MaxLength = 0;
				colvarFeeStatic.AutoIncrement = false;
				colvarFeeStatic.IsNullable = true;
				colvarFeeStatic.IsPrimaryKey = false;
				colvarFeeStatic.IsForeignKey = false;
				colvarFeeStatic.IsReadOnly = false;
				colvarFeeStatic.DefaultSetting = @"";
				colvarFeeStatic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeStatic);
				
				TableSchema.TableColumn colvarExchangeKey = new TableSchema.TableColumn(schema);
				colvarExchangeKey.ColumnName = "exchange_key";
				colvarExchangeKey.DataType = DbType.Int32;
				colvarExchangeKey.MaxLength = 0;
				colvarExchangeKey.AutoIncrement = false;
				colvarExchangeKey.IsNullable = true;
				colvarExchangeKey.IsPrimaryKey = false;
				colvarExchangeKey.IsForeignKey = false;
				colvarExchangeKey.IsReadOnly = false;
				colvarExchangeKey.DefaultSetting = @"";
				colvarExchangeKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeKey);
				
				TableSchema.TableColumn colvarApicall = new TableSchema.TableColumn(schema);
				colvarApicall.ColumnName = "apicall";
				colvarApicall.DataType = DbType.String;
				colvarApicall.MaxLength = 10;
				colvarApicall.AutoIncrement = false;
				colvarApicall.IsNullable = true;
				colvarApicall.IsPrimaryKey = false;
				colvarApicall.IsForeignKey = false;
				colvarApicall.IsReadOnly = false;
				colvarApicall.DefaultSetting = @"";
				colvarApicall.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApicall);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Bitcoin_Notify"].AddSchema("Markets_Static",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MarketStaticKey")]
		[Bindable(true)]
		public int MarketStaticKey 
		{
			get { return GetColumnValue<int>(Columns.MarketStaticKey); }
			set { SetColumnValue(Columns.MarketStaticKey, value); }
		}
		  
		[XmlAttribute("SourceCurrency")]
		[Bindable(true)]
		public int? SourceCurrency 
		{
			get { return GetColumnValue<int?>(Columns.SourceCurrency); }
			set { SetColumnValue(Columns.SourceCurrency, value); }
		}
		  
		[XmlAttribute("DestinationCurrency")]
		[Bindable(true)]
		public int? DestinationCurrency 
		{
			get { return GetColumnValue<int?>(Columns.DestinationCurrency); }
			set { SetColumnValue(Columns.DestinationCurrency, value); }
		}
		  
		[XmlAttribute("FeePercentage")]
		[Bindable(true)]
		public decimal? FeePercentage 
		{
			get { return GetColumnValue<decimal?>(Columns.FeePercentage); }
			set { SetColumnValue(Columns.FeePercentage, value); }
		}
		  
		[XmlAttribute("FeeStatic")]
		[Bindable(true)]
		public decimal? FeeStatic 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeStatic); }
			set { SetColumnValue(Columns.FeeStatic, value); }
		}
		  
		[XmlAttribute("ExchangeKey")]
		[Bindable(true)]
		public int? ExchangeKey 
		{
			get { return GetColumnValue<int?>(Columns.ExchangeKey); }
			set { SetColumnValue(Columns.ExchangeKey, value); }
		}
		  
		[XmlAttribute("Apicall")]
		[Bindable(true)]
		public string Apicall 
		{
			get { return GetColumnValue<string>(Columns.Apicall); }
			set { SetColumnValue(Columns.Apicall, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varSourceCurrency,int? varDestinationCurrency,decimal? varFeePercentage,decimal? varFeeStatic,int? varExchangeKey,string varApicall)
		{
			MarketsStatic item = new MarketsStatic();
			
			item.SourceCurrency = varSourceCurrency;
			
			item.DestinationCurrency = varDestinationCurrency;
			
			item.FeePercentage = varFeePercentage;
			
			item.FeeStatic = varFeeStatic;
			
			item.ExchangeKey = varExchangeKey;
			
			item.Apicall = varApicall;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMarketStaticKey,int? varSourceCurrency,int? varDestinationCurrency,decimal? varFeePercentage,decimal? varFeeStatic,int? varExchangeKey,string varApicall)
		{
			MarketsStatic item = new MarketsStatic();
			
				item.MarketStaticKey = varMarketStaticKey;
			
				item.SourceCurrency = varSourceCurrency;
			
				item.DestinationCurrency = varDestinationCurrency;
			
				item.FeePercentage = varFeePercentage;
			
				item.FeeStatic = varFeeStatic;
			
				item.ExchangeKey = varExchangeKey;
			
				item.Apicall = varApicall;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MarketStaticKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SourceCurrencyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationCurrencyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FeePercentageColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeStaticColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeKeyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ApicallColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MarketStaticKey = @"market_static_key";
			 public static string SourceCurrency = @"source_currency";
			 public static string DestinationCurrency = @"destination_currency";
			 public static string FeePercentage = @"fee_percentage";
			 public static string FeeStatic = @"fee_static";
			 public static string ExchangeKey = @"exchange_key";
			 public static string Apicall = @"apicall";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
