using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace RippleTrade_DB
{
	/// <summary>
	/// Strongly-typed collection for the Transaction class.
	/// </summary>
    [Serializable]
	public partial class TransactionCollection : ActiveList<Transaction, TransactionCollection>
	{	   
		public TransactionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionCollection</returns>
		public TransactionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Transaction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transactions table.
	/// </summary>
	[Serializable]
	public partial class Transaction : ActiveRecord<Transaction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Transaction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Transaction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Transaction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Transaction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transactions", TableType.Table, DataService.GetInstance("RippleTrade"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "tx_key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = true;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = true;
				colvarTxKey.IsForeignKey = false;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				colvarTxKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarMarketKey = new TableSchema.TableColumn(schema);
				colvarMarketKey.ColumnName = "market_key";
				colvarMarketKey.DataType = DbType.Int32;
				colvarMarketKey.MaxLength = 0;
				colvarMarketKey.AutoIncrement = false;
				colvarMarketKey.IsNullable = true;
				colvarMarketKey.IsPrimaryKey = false;
				colvarMarketKey.IsForeignKey = false;
				colvarMarketKey.IsReadOnly = false;
				colvarMarketKey.DefaultSetting = @"";
				colvarMarketKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketKey);
				
				TableSchema.TableColumn colvarDateAttempted = new TableSchema.TableColumn(schema);
				colvarDateAttempted.ColumnName = "date_attempted";
				colvarDateAttempted.DataType = DbType.DateTime;
				colvarDateAttempted.MaxLength = 0;
				colvarDateAttempted.AutoIncrement = false;
				colvarDateAttempted.IsNullable = true;
				colvarDateAttempted.IsPrimaryKey = false;
				colvarDateAttempted.IsForeignKey = false;
				colvarDateAttempted.IsReadOnly = false;
				colvarDateAttempted.DefaultSetting = @"";
				colvarDateAttempted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateAttempted);
				
				TableSchema.TableColumn colvarDateCompleted = new TableSchema.TableColumn(schema);
				colvarDateCompleted.ColumnName = "date_completed";
				colvarDateCompleted.DataType = DbType.DateTime;
				colvarDateCompleted.MaxLength = 0;
				colvarDateCompleted.AutoIncrement = false;
				colvarDateCompleted.IsNullable = true;
				colvarDateCompleted.IsPrimaryKey = false;
				colvarDateCompleted.IsForeignKey = false;
				colvarDateCompleted.IsReadOnly = false;
				colvarDateCompleted.DefaultSetting = @"";
				colvarDateCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCompleted);
				
				TableSchema.TableColumn colvarTxStatus = new TableSchema.TableColumn(schema);
				colvarTxStatus.ColumnName = "tx_status";
				colvarTxStatus.DataType = DbType.Int32;
				colvarTxStatus.MaxLength = 0;
				colvarTxStatus.AutoIncrement = false;
				colvarTxStatus.IsNullable = true;
				colvarTxStatus.IsPrimaryKey = false;
				colvarTxStatus.IsForeignKey = false;
				colvarTxStatus.IsReadOnly = false;
				colvarTxStatus.DefaultSetting = @"";
				colvarTxStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxStatus);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["RippleTrade"].AddSchema("Transactions",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int TxKey 
		{
			get { return GetColumnValue<int>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("MarketKey")]
		[Bindable(true)]
		public int? MarketKey 
		{
			get { return GetColumnValue<int?>(Columns.MarketKey); }
			set { SetColumnValue(Columns.MarketKey, value); }
		}
		  
		[XmlAttribute("DateAttempted")]
		[Bindable(true)]
		public DateTime? DateAttempted 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateAttempted); }
			set { SetColumnValue(Columns.DateAttempted, value); }
		}
		  
		[XmlAttribute("DateCompleted")]
		[Bindable(true)]
		public DateTime? DateCompleted 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateCompleted); }
			set { SetColumnValue(Columns.DateCompleted, value); }
		}
		  
		[XmlAttribute("TxStatus")]
		[Bindable(true)]
		public int? TxStatus 
		{
			get { return GetColumnValue<int?>(Columns.TxStatus); }
			set { SetColumnValue(Columns.TxStatus, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMarketKey,DateTime? varDateAttempted,DateTime? varDateCompleted,int? varTxStatus)
		{
			Transaction item = new Transaction();
			
			item.MarketKey = varMarketKey;
			
			item.DateAttempted = varDateAttempted;
			
			item.DateCompleted = varDateCompleted;
			
			item.TxStatus = varTxStatus;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTxKey,int? varMarketKey,DateTime? varDateAttempted,DateTime? varDateCompleted,int? varTxStatus)
		{
			Transaction item = new Transaction();
			
				item.TxKey = varTxKey;
			
				item.MarketKey = varMarketKey;
			
				item.DateAttempted = varDateAttempted;
			
				item.DateCompleted = varDateCompleted;
			
				item.TxStatus = varTxStatus;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MarketKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DateAttemptedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCompletedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TxStatusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxKey = @"tx_key";
			 public static string MarketKey = @"market_key";
			 public static string DateAttempted = @"date_attempted";
			 public static string DateCompleted = @"date_completed";
			 public static string TxStatus = @"tx_status";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
