using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace RippleTrade_DB
{
	/// <summary>
	/// Strongly-typed collection for the Exchange class.
	/// </summary>
    [Serializable]
	public partial class ExchangeCollection : ActiveList<Exchange, ExchangeCollection>
	{	   
		public ExchangeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ExchangeCollection</returns>
		public ExchangeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Exchange o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Exchanges table.
	/// </summary>
	[Serializable]
	public partial class Exchange : ActiveRecord<Exchange>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Exchange()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Exchange(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Exchange(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Exchange(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Exchanges", TableType.Table, DataService.GetInstance("RippleTrade"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExchangeKey = new TableSchema.TableColumn(schema);
				colvarExchangeKey.ColumnName = "exchange_key";
				colvarExchangeKey.DataType = DbType.Int32;
				colvarExchangeKey.MaxLength = 0;
				colvarExchangeKey.AutoIncrement = false;
				colvarExchangeKey.IsNullable = false;
				colvarExchangeKey.IsPrimaryKey = true;
				colvarExchangeKey.IsForeignKey = false;
				colvarExchangeKey.IsReadOnly = false;
				colvarExchangeKey.DefaultSetting = @"";
				colvarExchangeKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeKey);
				
				TableSchema.TableColumn colvarExchangeName = new TableSchema.TableColumn(schema);
				colvarExchangeName.ColumnName = "exchange_name";
				colvarExchangeName.DataType = DbType.String;
				colvarExchangeName.MaxLength = 50;
				colvarExchangeName.AutoIncrement = false;
				colvarExchangeName.IsNullable = false;
				colvarExchangeName.IsPrimaryKey = false;
				colvarExchangeName.IsForeignKey = false;
				colvarExchangeName.IsReadOnly = false;
				colvarExchangeName.DefaultSetting = @"";
				colvarExchangeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeName);
				
				TableSchema.TableColumn colvarExchangeShortname = new TableSchema.TableColumn(schema);
				colvarExchangeShortname.ColumnName = "exchange_shortname";
				colvarExchangeShortname.DataType = DbType.AnsiString;
				colvarExchangeShortname.MaxLength = 4;
				colvarExchangeShortname.AutoIncrement = false;
				colvarExchangeShortname.IsNullable = true;
				colvarExchangeShortname.IsPrimaryKey = false;
				colvarExchangeShortname.IsForeignKey = false;
				colvarExchangeShortname.IsReadOnly = false;
				colvarExchangeShortname.DefaultSetting = @"";
				colvarExchangeShortname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeShortname);
				
				TableSchema.TableColumn colvarOnlyalt = new TableSchema.TableColumn(schema);
				colvarOnlyalt.ColumnName = "onlyalt";
				colvarOnlyalt.DataType = DbType.Boolean;
				colvarOnlyalt.MaxLength = 0;
				colvarOnlyalt.AutoIncrement = false;
				colvarOnlyalt.IsNullable = true;
				colvarOnlyalt.IsPrimaryKey = false;
				colvarOnlyalt.IsForeignKey = false;
				colvarOnlyalt.IsReadOnly = false;
				colvarOnlyalt.DefaultSetting = @"";
				colvarOnlyalt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOnlyalt);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["RippleTrade"].AddSchema("Exchanges",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExchangeKey")]
		[Bindable(true)]
		public int ExchangeKey 
		{
			get { return GetColumnValue<int>(Columns.ExchangeKey); }
			set { SetColumnValue(Columns.ExchangeKey, value); }
		}
		  
		[XmlAttribute("ExchangeName")]
		[Bindable(true)]
		public string ExchangeName 
		{
			get { return GetColumnValue<string>(Columns.ExchangeName); }
			set { SetColumnValue(Columns.ExchangeName, value); }
		}
		  
		[XmlAttribute("ExchangeShortname")]
		[Bindable(true)]
		public string ExchangeShortname 
		{
			get { return GetColumnValue<string>(Columns.ExchangeShortname); }
			set { SetColumnValue(Columns.ExchangeShortname, value); }
		}
		  
		[XmlAttribute("Onlyalt")]
		[Bindable(true)]
		public bool? Onlyalt 
		{
			get { return GetColumnValue<bool?>(Columns.Onlyalt); }
			set { SetColumnValue(Columns.Onlyalt, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varExchangeKey,string varExchangeName,string varExchangeShortname,bool? varOnlyalt,string varAddress)
		{
			Exchange item = new Exchange();
			
			item.ExchangeKey = varExchangeKey;
			
			item.ExchangeName = varExchangeName;
			
			item.ExchangeShortname = varExchangeShortname;
			
			item.Onlyalt = varOnlyalt;
			
			item.Address = varAddress;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varExchangeKey,string varExchangeName,string varExchangeShortname,bool? varOnlyalt,string varAddress)
		{
			Exchange item = new Exchange();
			
				item.ExchangeKey = varExchangeKey;
			
				item.ExchangeName = varExchangeName;
			
				item.ExchangeShortname = varExchangeShortname;
			
				item.Onlyalt = varOnlyalt;
			
				item.Address = varAddress;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExchangeKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeShortnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OnlyaltColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExchangeKey = @"exchange_key";
			 public static string ExchangeName = @"exchange_name";
			 public static string ExchangeShortname = @"exchange_shortname";
			 public static string Onlyalt = @"onlyalt";
			 public static string Address = @"address";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
