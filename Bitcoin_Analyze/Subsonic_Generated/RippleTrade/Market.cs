using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace RippleTrade_DB
{
	/// <summary>
	/// Strongly-typed collection for the Market class.
	/// </summary>
    [Serializable]
	public partial class MarketCollection : ActiveList<Market, MarketCollection>
	{	   
		public MarketCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MarketCollection</returns>
		public MarketCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Market o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Markets table.
	/// </summary>
	[Serializable]
	public partial class Market : ActiveRecord<Market>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Market()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Market(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Market(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Market(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Markets", TableType.Table, DataService.GetInstance("RippleTrade"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMarketKey = new TableSchema.TableColumn(schema);
				colvarMarketKey.ColumnName = "market_key";
				colvarMarketKey.DataType = DbType.Int32;
				colvarMarketKey.MaxLength = 0;
				colvarMarketKey.AutoIncrement = true;
				colvarMarketKey.IsNullable = false;
				colvarMarketKey.IsPrimaryKey = true;
				colvarMarketKey.IsForeignKey = false;
				colvarMarketKey.IsReadOnly = false;
				colvarMarketKey.DefaultSetting = @"";
				colvarMarketKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketKey);
				
				TableSchema.TableColumn colvarSource = new TableSchema.TableColumn(schema);
				colvarSource.ColumnName = "source";
				colvarSource.DataType = DbType.Int32;
				colvarSource.MaxLength = 0;
				colvarSource.AutoIncrement = false;
				colvarSource.IsNullable = false;
				colvarSource.IsPrimaryKey = false;
				colvarSource.IsForeignKey = false;
				colvarSource.IsReadOnly = false;
				colvarSource.DefaultSetting = @"";
				colvarSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSource);
				
				TableSchema.TableColumn colvarDestination = new TableSchema.TableColumn(schema);
				colvarDestination.ColumnName = "destination";
				colvarDestination.DataType = DbType.Int32;
				colvarDestination.MaxLength = 0;
				colvarDestination.AutoIncrement = false;
				colvarDestination.IsNullable = false;
				colvarDestination.IsPrimaryKey = false;
				colvarDestination.IsForeignKey = false;
				colvarDestination.IsReadOnly = false;
				colvarDestination.DefaultSetting = @"";
				colvarDestination.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestination);
				
				TableSchema.TableColumn colvarAutomatic = new TableSchema.TableColumn(schema);
				colvarAutomatic.ColumnName = "automatic";
				colvarAutomatic.DataType = DbType.Boolean;
				colvarAutomatic.MaxLength = 0;
				colvarAutomatic.AutoIncrement = false;
				colvarAutomatic.IsNullable = false;
				colvarAutomatic.IsPrimaryKey = false;
				colvarAutomatic.IsForeignKey = false;
				colvarAutomatic.IsReadOnly = false;
				colvarAutomatic.DefaultSetting = @"";
				colvarAutomatic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutomatic);
				
				TableSchema.TableColumn colvarFeePercentage = new TableSchema.TableColumn(schema);
				colvarFeePercentage.ColumnName = "fee_percentage";
				colvarFeePercentage.DataType = DbType.Currency;
				colvarFeePercentage.MaxLength = 0;
				colvarFeePercentage.AutoIncrement = false;
				colvarFeePercentage.IsNullable = true;
				colvarFeePercentage.IsPrimaryKey = false;
				colvarFeePercentage.IsForeignKey = false;
				colvarFeePercentage.IsReadOnly = false;
				colvarFeePercentage.DefaultSetting = @"";
				colvarFeePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeePercentage);
				
				TableSchema.TableColumn colvarFeeStatic = new TableSchema.TableColumn(schema);
				colvarFeeStatic.ColumnName = "fee_static";
				colvarFeeStatic.DataType = DbType.Currency;
				colvarFeeStatic.MaxLength = 0;
				colvarFeeStatic.AutoIncrement = false;
				colvarFeeStatic.IsNullable = true;
				colvarFeeStatic.IsPrimaryKey = false;
				colvarFeeStatic.IsForeignKey = false;
				colvarFeeStatic.IsReadOnly = false;
				colvarFeeStatic.DefaultSetting = @"";
				colvarFeeStatic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeStatic);
				
				TableSchema.TableColumn colvarRatechanges = new TableSchema.TableColumn(schema);
				colvarRatechanges.ColumnName = "ratechanges";
				colvarRatechanges.DataType = DbType.Boolean;
				colvarRatechanges.MaxLength = 0;
				colvarRatechanges.AutoIncrement = false;
				colvarRatechanges.IsNullable = true;
				colvarRatechanges.IsPrimaryKey = false;
				colvarRatechanges.IsForeignKey = false;
				colvarRatechanges.IsReadOnly = false;
				colvarRatechanges.DefaultSetting = @"";
				colvarRatechanges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRatechanges);
				
				TableSchema.TableColumn colvarExchangetime = new TableSchema.TableColumn(schema);
				colvarExchangetime.ColumnName = "exchangetime";
				colvarExchangetime.DataType = DbType.Int32;
				colvarExchangetime.MaxLength = 0;
				colvarExchangetime.AutoIncrement = false;
				colvarExchangetime.IsNullable = true;
				colvarExchangetime.IsPrimaryKey = false;
				colvarExchangetime.IsForeignKey = false;
				colvarExchangetime.IsReadOnly = false;
				colvarExchangetime.DefaultSetting = @"";
				colvarExchangetime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangetime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["RippleTrade"].AddSchema("Markets",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MarketKey")]
		[Bindable(true)]
		public int MarketKey 
		{
			get { return GetColumnValue<int>(Columns.MarketKey); }
			set { SetColumnValue(Columns.MarketKey, value); }
		}
		  
		[XmlAttribute("Source")]
		[Bindable(true)]
		public int Source 
		{
			get { return GetColumnValue<int>(Columns.Source); }
			set { SetColumnValue(Columns.Source, value); }
		}
		  
		[XmlAttribute("Destination")]
		[Bindable(true)]
		public int Destination 
		{
			get { return GetColumnValue<int>(Columns.Destination); }
			set { SetColumnValue(Columns.Destination, value); }
		}
		  
		[XmlAttribute("Automatic")]
		[Bindable(true)]
		public bool Automatic 
		{
			get { return GetColumnValue<bool>(Columns.Automatic); }
			set { SetColumnValue(Columns.Automatic, value); }
		}
		  
		[XmlAttribute("FeePercentage")]
		[Bindable(true)]
		public decimal? FeePercentage 
		{
			get { return GetColumnValue<decimal?>(Columns.FeePercentage); }
			set { SetColumnValue(Columns.FeePercentage, value); }
		}
		  
		[XmlAttribute("FeeStatic")]
		[Bindable(true)]
		public decimal? FeeStatic 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeStatic); }
			set { SetColumnValue(Columns.FeeStatic, value); }
		}
		  
		[XmlAttribute("Ratechanges")]
		[Bindable(true)]
		public bool? Ratechanges 
		{
			get { return GetColumnValue<bool?>(Columns.Ratechanges); }
			set { SetColumnValue(Columns.Ratechanges, value); }
		}
		  
		[XmlAttribute("Exchangetime")]
		[Bindable(true)]
		public int? Exchangetime 
		{
			get { return GetColumnValue<int?>(Columns.Exchangetime); }
			set { SetColumnValue(Columns.Exchangetime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varSource,int varDestination,bool varAutomatic,decimal? varFeePercentage,decimal? varFeeStatic,bool? varRatechanges,int? varExchangetime)
		{
			Market item = new Market();
			
			item.Source = varSource;
			
			item.Destination = varDestination;
			
			item.Automatic = varAutomatic;
			
			item.FeePercentage = varFeePercentage;
			
			item.FeeStatic = varFeeStatic;
			
			item.Ratechanges = varRatechanges;
			
			item.Exchangetime = varExchangetime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMarketKey,int varSource,int varDestination,bool varAutomatic,decimal? varFeePercentage,decimal? varFeeStatic,bool? varRatechanges,int? varExchangetime)
		{
			Market item = new Market();
			
				item.MarketKey = varMarketKey;
			
				item.Source = varSource;
			
				item.Destination = varDestination;
			
				item.Automatic = varAutomatic;
			
				item.FeePercentage = varFeePercentage;
			
				item.FeeStatic = varFeeStatic;
			
				item.Ratechanges = varRatechanges;
			
				item.Exchangetime = varExchangetime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MarketKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SourceColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DestinationColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AutomaticColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FeePercentageColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeStaticColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RatechangesColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangetimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MarketKey = @"market_key";
			 public static string Source = @"source";
			 public static string Destination = @"destination";
			 public static string Automatic = @"automatic";
			 public static string FeePercentage = @"fee_percentage";
			 public static string FeeStatic = @"fee_static";
			 public static string Ratechanges = @"ratechanges";
			 public static string Exchangetime = @"exchangetime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
