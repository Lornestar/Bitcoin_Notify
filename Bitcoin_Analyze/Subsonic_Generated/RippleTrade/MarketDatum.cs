using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace RippleTrade_DB
{
	/// <summary>
	/// Strongly-typed collection for the MarketDatum class.
	/// </summary>
    [Serializable]
	public partial class MarketDatumCollection : ActiveList<MarketDatum, MarketDatumCollection>
	{	   
		public MarketDatumCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MarketDatumCollection</returns>
		public MarketDatumCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MarketDatum o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the MarketData table.
	/// </summary>
	[Serializable]
	public partial class MarketDatum : ActiveRecord<MarketDatum>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public MarketDatum()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MarketDatum(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public MarketDatum(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public MarketDatum(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MarketData", TableType.Table, DataService.GetInstance("RippleTrade"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "price";
				colvarPrice.DataType = DbType.AnsiString;
				colvarPrice.MaxLength = 50;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = true;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarDatechanged = new TableSchema.TableColumn(schema);
				colvarDatechanged.ColumnName = "datechanged";
				colvarDatechanged.DataType = DbType.DateTime;
				colvarDatechanged.MaxLength = 0;
				colvarDatechanged.AutoIncrement = false;
				colvarDatechanged.IsNullable = false;
				colvarDatechanged.IsPrimaryKey = false;
				colvarDatechanged.IsForeignKey = false;
				colvarDatechanged.IsReadOnly = false;
				colvarDatechanged.DefaultSetting = @"";
				colvarDatechanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatechanged);
				
				TableSchema.TableColumn colvarMarketKey = new TableSchema.TableColumn(schema);
				colvarMarketKey.ColumnName = "market_key";
				colvarMarketKey.DataType = DbType.Int32;
				colvarMarketKey.MaxLength = 0;
				colvarMarketKey.AutoIncrement = false;
				colvarMarketKey.IsNullable = false;
				colvarMarketKey.IsPrimaryKey = true;
				colvarMarketKey.IsForeignKey = false;
				colvarMarketKey.IsReadOnly = false;
				colvarMarketKey.DefaultSetting = @"";
				colvarMarketKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketKey);
				
				TableSchema.TableColumn colvarVolume = new TableSchema.TableColumn(schema);
				colvarVolume.ColumnName = "volume";
				colvarVolume.DataType = DbType.AnsiString;
				colvarVolume.MaxLength = 50;
				colvarVolume.AutoIncrement = false;
				colvarVolume.IsNullable = true;
				colvarVolume.IsPrimaryKey = false;
				colvarVolume.IsForeignKey = false;
				colvarVolume.IsReadOnly = false;
				colvarVolume.DefaultSetting = @"";
				colvarVolume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVolume);
				
				TableSchema.TableColumn colvarLevel = new TableSchema.TableColumn(schema);
				colvarLevel.ColumnName = "level";
				colvarLevel.DataType = DbType.Int32;
				colvarLevel.MaxLength = 0;
				colvarLevel.AutoIncrement = false;
				colvarLevel.IsNullable = true;
				colvarLevel.IsPrimaryKey = false;
				colvarLevel.IsForeignKey = false;
				colvarLevel.IsReadOnly = false;
				colvarLevel.DefaultSetting = @"";
				colvarLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLevel);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["RippleTrade"].AddSchema("MarketData",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public string Price 
		{
			get { return GetColumnValue<string>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("Datechanged")]
		[Bindable(true)]
		public DateTime Datechanged 
		{
			get { return GetColumnValue<DateTime>(Columns.Datechanged); }
			set { SetColumnValue(Columns.Datechanged, value); }
		}
		  
		[XmlAttribute("MarketKey")]
		[Bindable(true)]
		public int MarketKey 
		{
			get { return GetColumnValue<int>(Columns.MarketKey); }
			set { SetColumnValue(Columns.MarketKey, value); }
		}
		  
		[XmlAttribute("Volume")]
		[Bindable(true)]
		public string Volume 
		{
			get { return GetColumnValue<string>(Columns.Volume); }
			set { SetColumnValue(Columns.Volume, value); }
		}
		  
		[XmlAttribute("Level")]
		[Bindable(true)]
		public int? Level 
		{
			get { return GetColumnValue<int?>(Columns.Level); }
			set { SetColumnValue(Columns.Level, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPrice,DateTime varDatechanged,int varMarketKey,string varVolume,int? varLevel)
		{
			MarketDatum item = new MarketDatum();
			
			item.Price = varPrice;
			
			item.Datechanged = varDatechanged;
			
			item.MarketKey = varMarketKey;
			
			item.Volume = varVolume;
			
			item.Level = varLevel;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varPrice,DateTime varDatechanged,int varMarketKey,string varVolume,int? varLevel)
		{
			MarketDatum item = new MarketDatum();
			
				item.Price = varPrice;
			
				item.Datechanged = varDatechanged;
			
				item.MarketKey = varMarketKey;
			
				item.Volume = varVolume;
			
				item.Level = varLevel;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DatechangedColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MarketKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn VolumeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LevelColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Price = @"price";
			 public static string Datechanged = @"datechanged";
			 public static string MarketKey = @"market_key";
			 public static string Volume = @"volume";
			 public static string Level = @"level";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
